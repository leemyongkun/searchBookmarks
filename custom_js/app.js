var tab_list= document.getElementById('tab_list'), bookmark_list= document.getElementById('bookmarks_list'), history_list= document.getElementById('history_list'),FAVICON="chrome://thumb/";var map = new Map();var resultData = [];$(document).ready(function(){    buttonEventInit(setEnvironment);    popoverSetting();	toggleSetting();    setInterval(function(){      history();    },5000);		//var datahtml = "<html><body><div><div class='class0'><h4>data1 </h4><p class='class1'>data2</p><div id='mydivid'><p>data3</p></div></div></div></body></html>";//console.log($(datahtml).find("div").text()); // Now it Works too/*var url = 'http://navercast.naver.com/magazine_contents.nhn?rid=1108&contents_id=19548&leafId=';     getUrl(url ,function(data){          data = asciible(data);          var startBody = data.indexOf("<body");          var endBody = data.indexOf("</body");          data = data.substring(startBody, endBody);          //data = parsing(data);                    startScript = data.indexOf("<script");          endScript = data.indexOf("</script")+9;          var scriptStr;          while(startScript != -1){                            scriptStr = data.substring(startScript,endScript);              data = data.replace(scriptStr,"");              startScript = data.indexOf("<script");              endScript = data.indexOf("</script")+9;                    }                           /*  while(startScript != -1){             //console.log(startScript, endScript);            var scriptStr = data.substring(startScript,endScript);            data = data.replace(scriptStr,"");                        startScript = data.indexOf("<script");            endScript = data.indexOf("</script");            console.log(startScript,endScript);          }*/            //        console.log(data);         // console.log(data.indexOf("<script"));         // console.log(data.indexOf("</script"));          //http://ejohn.org/apps/htmlparser/          //http://www.jeremymartin.name/projects.php?project=asciible          //http://jmar777.googlecode.com/svn/trunk/js/asciible.js//      }); });function toggleSetting(){	$("#menu-toggle").click(function(e) {        e.preventDefault();        $("#wrapper").toggleClass("toggled");    });		$("#menu-toggle2").click(function(e) {        e.preventDefault();        $("#wrapper").toggleClass("toggled");    });}function popoverSetting(){    var panelMessage = [    "<ol><li> Open the Setting Flags ( URL : chrome://flags ) </li><br>",    "<li>Find the '#enable-panels' ( Ctrl + f )</li><br>",    "<li>'use' and then click Restart </li><br>",    "</ol><ul><br>",    "<font color='red'><b>※ If you do not set the Panel runs popup.</b></font>"    ].join('');    $('#usingPanel').on('click',function(){        bootbox.dialog({          message: panelMessage,          title: "How to use the 'Panel'?",          buttons: {            success: {              label: "DONE",              className: "btn-success",              callback: function() {                              }            }          }        });    });    var libMessage = [    "<ul><li>jsTree ➡ https://www.jstree.com/</li><br>",    "<li>Template ➡ http://startbootstrap.com/template-overviews/creative/</li><br>",    "<li>Clock ➡ http://www.jqueryscript.net/time-clock/Animated-Digital-Clock-Plugin-with-jQuery-CSS3.html</li><br>",    "</ul>"    ].join('');    $('#usingLib').on('click',function(){        bootbox.dialog({          message: libMessage,          title: "Using Library & Module",          buttons: {            success: {              label: "DONE",              className: "btn-success",              callback: function() {                              }            }          }        });    });}function getUrlTest(url,callback){   $.ajax({      type: "GET",      url: url,      success:function(data) {        callback(data);      },      error:function(error){        console.log("error",error);      }    });}    function getTree(){        var datas;  chrome.bookmarks.getTree(function(roots){      $.when(getTreeProcess(roots)).done(function(data){        datas = data;      });     $.when(bookmarkInsertProcess(datas)).done(function(data){      });  });   }var getTreeProcess = function(roots){    var level = 0;    var bookmarks = [];           roots.forEach( function parser(node){        map.put(node.id,level);        //console.log(node.id);        bookmarks.push(node);           if (node.children) {          ++level;          node.children.forEach(parser);          --level;        }      });     return bookmarks;}  var bookmarkInsertProcess = function(datas){    initStatus = true;   var totalSize = datas.length;   var count = 1;   datas.forEach(function(data){    //console.log(data);    if(!data.parentId && data.children){        for(var idx = 0 ; idx < data.children.length ; idx++ ){          insertData(data.children[idx], function(obj){                               db.transaction(function(tx){                  tx.executeSql(insertStatement,obj);                },null,function(){                  count++;                });          });        }    }    if(data.parentId && data.children){        for(var idx = 0 ; idx < data.children.length ; idx++ ){         insertData(data.children[idx], function(obj){                      db.transaction(function(tx){              tx.executeSql(insertStatement,obj);              //console.log("tx insert data");                },null,function(){              count++;                             setTimeout(function(){                var percent =(100* (Number(count/totalSize))).toFixed(0) ;                                $('.progress-bar-info').html("Bookmark Sync ["+count+" / "+totalSize+"]").css('width',percent+'%');                              },500);              if(totalSize == count){                $('#sync_result').html(count);                $.when(updateUrlText()).done(function(){                                 })              };            });          });        }    }      });    return 0;};function updateUrlText(){   initStatus = true;   selectRow(selectAllforFileStatement , function(items) {            crawlTotalCount = items.length;           items.forEach( function(node){          var url = node.data;          var id = node.id;          setTimeout(function(){            getUrl(url ,function(data){              var result = parsing(data);              updateText(id,"y",result,function(obj){                    db.transaction(function(tx){                    tx.executeSql(updateTextStatement,obj);                      //console.log("update id :",id);                    },null,function(){                  });              });              });           },1000);      });      }); }function setEnvironment(callback_getItems){   selectRow(selectEnvStatement, function(items) {      settingEnv(items, function(history){          callback_getItems(history);      }); });  } var initProcess = function(){  $('#data').empty();  dbConnect();  $.when(getTree()).done(function(){      updateInitFlag();  });};function settingEnv(env, callback){    var initFlag = env[0].initFlag,      imageFilePath = env[0].imageFilePath,      selectBackground = env[0].selectBackground,      googleChecked = env[0].googleSearchChecked,      clockChecked = env[0].clockChecked;    if(initFlag == "N"){      bootbox.alert("Those who first use must be synchronized.", function() {        bootbox.dialog({            message: message,            title: "Bookmarks Sync",            closeButton: false,            buttons: {              success: {                label: "Done",                className: "btn-info",                callback: function() {                     if(initStatus){                       bootbox.alert("During synchronization , you can not stop progress.", function() {});                        return false;                     }else{                        setEnvironment(getItems);                        location.reload();                      }                }              }            }          });                 initProcess();         $('.btn-info').hide();      });    };          if(selectBackground == 'bookmark'){      $('#bookmark_back').click();    }else{      $('#picture_back').click();    };  if(imageFilePath == null){}else{    setBackgroundImage(imageFilePath);  };  if(googleChecked=="y"){      $('input:checkbox[id="googleCheck"]').attr("checked", true);      $('#googleSearchArea').show();  }else{      $('input:checkbox[id="googleCheck"]').attr("checked", false);      $('#googleSearchArea').hide();  };  if(clockChecked=="y"){      $('input:checkbox[id="clockCheck"]').attr("checked", true);      $('#clockArea').show();  }else{      $('input:checkbox[id="clockCheck"]').attr("checked", false);      $('#clockArea').hide();  };    callback(history);}function executeSearch(query, selectedFlag){       var url = "https://www.google.com/search?q="+query;   newTab(url);}function executeBookmarkSearch(){            var parameter = $('#searchQuery').val();            var googleSearchCheck = $('#includeGoogleSearch').is(":checked");            if(googleSearchCheck){          executeSearch(parameter, false);      };            parameter = parameter.replace(/(^\s*)|(\s*$)/gi, "");      if(parameter==null || parameter == ''){        return false;      };      var result = $('#result');      var preSize = 200;      var postSize = 200;      var text, title, totalSize;      var highlight_color = 'orange';      result.empty();      bookmarkSearch(bookmarkSearchStatement, parameter, function(items) {          if(items.length == 0){            result.append("<span> No results were found for your search. </span>");          }else{            result.append("<span>"+items.length+" item(s) </span><hr>");          };          var cnt = 1;          items.forEach(function(item){                        title = item.title;            if(item.text != null){              text = item.text;            }else{              text = "";            };            totalSize = text.length;            var start, end ;            var firstKeyword = parameter.split(" ")[0];            var keywordIndex = text.indexOf(firstKeyword);            start = keywordIndex - preSize;            end = keywordIndex + postSize;            text = text.substring(start, end);            text = text.replace(firstKeyword, "<span>"+firstKeyword+"</span>");            var titleKeywordIndex = title.indexOf(firstKeyword);            start = titleKeywordIndex - preSize;            end = titleKeywordIndex + postSize;            title = title.substring(start, end);            title = title.replace(firstKeyword, "<span>"+firstKeyword+"</span>");                                    var faviconUrl = "chrome://favicon/"+item.url;             var a = "<a href='#"+item.id+"' id='result_"+item.id+"' >"+cnt+". "+"<font color='blue'>["+item.date+"]</font> <img src='"+faviconUrl+"'> "+ title+"  </a>  <a href='#' id='result_new_"+item.id+"' ><img src='img/new2.png'></a><br> \                     <span>"+text+"</span>  <hr>";            result.append(a);                      $('#result_new_'+item.id).on('click',function(){              newPanel(item.url);          });            $('#result_'+item.id).on('dblclick',function(){                if(item.flag=="file"){                    newTab(item.url);                }else{                                    $("#data").jstree('open_node', "#"+item.id, function(e,d) {                    for (var i = 0; i < e.parents.length; i++) {                      $("#data").jstree('open_node', "#"+e.parents[i]);                    };                  });                  $("#data").jstree('select_node', "#"+item.id);                                                   };            });                      cnt++;          })       });}; var bookmarkToDatabase = function(datas, callback_updateUrlText){    bookmarkInsertProcess(datas,function(){      callback_updateUrlText();  })    };function getItems(callback_getHistory){   selectRow(selectAllStatement, function(items) {      createTree(items,'default');   });  selectRow(selectHostGroup, function(items) {      createTree(items,'group');   });   callback_getHistory();}function history(){  var cnt = 1;  var opened = false;  var panel = 0;  chrome.history.search({text: '', maxResults: 50}, function(data) {      $('#visit').empty();      data.forEach(function(page) {          var title = page.title;          var domain = "";                    if(title == ""){                        a = document.createElement('a');            a.href = page.url;            domain =  a.host;            title = '[notitle] '+domain;                      };          var a = "<a href='#' id='"+page.id+"' >"+cnt+". "+"<font color='blue'>["+getDate(page.lastVisitTime)+"]</font> <img src='chrome://favicon/"+page.url+"''> "+ title+                  "  <span class='badge'>"+page.visitCount+"</span></a>  <a href='#' id='new_"+page.id+"' ><img src='img/new2.png'></a><hr>";          $('#visit').append(a);                    $('#'+page.id).on('dblclick',function(){              newTab(page.url);                        });          $('#new_'+page.id).on('click',function(){              newPanel(page.url);          });          cnt++;        });  });}  function updateBookmark(flag, item){    var message ;            var data = item.data.split(" ");    var id = data[0];    var type = data[1];    var url = data[2];    var crawlYN = data[3];    var text;    var parent = item.parent;    if(type=="folder"){      text = item.text.split("[");      text = text[0];      url = "This node has no URL.";    }else{      text = item.text;      if(crawlYN == "n"){        text = $(text).find('del').html();      }    };          if(flag =='rename'){      if(parent == "#"){        bootbox.alert("Top-level node can not be updated.", function() {});        return false;      };        message = ["<div class='input-group'>",      "<span class='input-group-addon' id='basic-addon1'><span class='glyphicon glyphicon-tag' aria-'hidden=true'></span></span>",      "<input type='text' id='title' class='form-control' placeholder='TITLE' aria-describedby='basic-addon1' value='"+text+"''>",      "</div>",      "<div class='input-group'>",      "<span class='input-group-addon' id='basic-addon1'><span class='glyphicon glyphicon-globe' aria-hidden='true'></span></span>",      "<input type='text' id='url' class='form-control' placeholder='URL' aria-describedby='basic-addon1' value='"+url+"' readonly>",      "</div>"].join('');    }else if(flag =="create"){         message = ["<div class='input-group'>",      "<span class='input-group-addon' id='basic-addon1'><span class='glyphicon glyphicon-tag' aria-'hidden=true'></span></span>",      "<input type='text' id='title' class='form-control' placeholder='TITLE' aria-describedby='basic-addon1'>",      "</div>",      "<div class='input-group'>",      "<span class='input-group-addon' id='basic-addon1'><span class='glyphicon glyphicon-globe' aria-hidden='true'></span></span>",      "<input type='text' id='url' class='form-control' placeholder='URL' aria-describedby='basic-addon1'>",      "</div>"].join('');    }else if(flag =="delete"){      if(parent == "#"){        bootbox.alert("Top-level node can not be deleted.", function() {});        return false;      };      message = ["[ <font color=red>"+text+"</font> ]<br> Are you sure you want to delete this node."].join('');    };   bootbox.dialog({      message: message,      title: "Update bookmarks",      buttons: {        success: {          label: "Yes",          className: "btn-success",          callback: function(current) {                            var title = $('#title').val();              var url = $('#url').val();              var data = item.data.split(" ");              var type = data[1];              var id = data[0];              var parent;                            if(flag =='rename'){                                updateItem(title,url,id);                chrome.bookmarks.update(id, {title:title}, function(){})              }else if(flag =="allopen"){                              }else if(flag =="create"){                if(type == "file"){                  parent = item.parent;                }else{                  parent = item.id;                }                chrome.bookmarks.create({parentId: parent, title:title, url:url},function(e){                });              }else if(flag =="delete"){                deleteItem(item.id);                $('#'+item.li_attr.id).hide();                chrome.bookmarks.remove(item.id,function(){});              }          }         },        danger: {          label: "No",          className: "btn-danger",          callback: function() {          }        }      }    });  }$('#detailBookmark').on('click',function(){  var url = "chrome://bookmarks";   chrome.windows.create({                  top:0,                  left:2000,                  width:800,                  height:500,                  type:'popup',                  url: url,                  focused: true            },function(window){              panel = window.id            })});var newTab = function(url){  chrome.tabs.query({ active: true, currentWindow: true },function(tab){                    var currentIndex = tab[0].index + 1;    var windowId = tab[0].id;    chrome.tabs.create({'url': url ,index:currentIndex}, function(tab) {});      chrome.tabs.onRemoved.addListener(      function(tabId, removeInfo) {      chrome.tabs.update(windowId, {active:true}, function(e){})    });  })};var newPanel = function(url){       opened = true;      chrome.windows.create({            width:1024,            height:768,            type:'detached_panel',            url: url ,            focused: true,            state:'docked'      },function(window){        panel = window.id      }) };